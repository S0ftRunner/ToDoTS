{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/components/EventEmmiter.ts","webpack://my-webpack-project/./src/index.ts","webpack://my-webpack-project/./src/components/Page.ts","webpack://my-webpack-project/./src/components/ToDoModel.ts","webpack://my-webpack-project/./src/utils/constants.ts","webpack://my-webpack-project/./src/components/Popup.ts","webpack://my-webpack-project/./src/components/ToDoPresenter.ts","webpack://my-webpack-project/./src/components/Form.ts","webpack://my-webpack-project/./src/components/Item.ts"],"sourcesContent":["/**\n * Брокер событий, классическая реализация\n * В расширенных вариантах есть возможность подписаться на все события\n * или слушать события по шаблону например\n */\nexport class EventEmitter {\n    constructor() {\n        this._events = new Map();\n    }\n    /**\n     * Установить обработчик на событие\n     */\n    on(eventName, callback) {\n        var _a;\n        if (!this._events.has(eventName)) {\n            this._events.set(eventName, new Set());\n        }\n        (_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.add(callback);\n    }\n    /**\n     * Снять обработчик с события\n     */\n    off(eventName, callback) {\n        var _a;\n        if (this._events.has(eventName)) {\n            this._events.get(eventName).delete(callback);\n            if (((_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.size) === 0) {\n                this._events.delete(eventName);\n            }\n        }\n    }\n    /**\n     * Инициировать событие с данными\n     */\n    emit(eventName, data) {\n        this._events.forEach((subscribers, name) => {\n            if (name instanceof RegExp && name.test(eventName) || name === eventName) {\n                subscribers.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n     * Слушать все события\n     */\n    onAll(callback) {\n        this.on(\"*\", callback);\n    }\n    /**\n     * Сбросить все обработчики\n     */\n    offAll() {\n        this._events = new Map();\n    }\n    /**\n     * Сделать коллбек триггер, генерирующий событие при вызове\n     */\n    trigger(eventName, context) {\n        return (event = {}) => {\n            this.emit(eventName, Object.assign(Object.assign({}, (event || {})), (context || {})));\n        };\n    }\n}\n","import \"./styles/styles.css\";\nimport { Page } from \"./components/Page\";\nimport { todos } from \"./utils/constants\";\nimport { ToDoModel } from \"./components/ToDoModel\";\nimport { ItemPresenter } from './components/ToDoPresenter';\nimport { Form } from \"./components/Form\";\nimport { Item } from \"./components/Item\";\nimport { Popup } from \"./components/Popup\";\nconst contentElement = document.querySelector(\".content\");\nconst popup = document.querySelector('.popup');\nconst itemContainer = new Page(contentElement);\nconst todoModel = new ToDoModel();\ntodoModel.items = todos;\nconst modal = new Popup(popup);\nconst itemPresenter = new ItemPresenter(todoModel, Form, itemContainer, Item, modal);\nitemPresenter.init();\nitemPresenter.renderView();\n","export class Page {\n    constructor(container) {\n        this.container = container;\n        this._formContainer = this.container.querySelector('.todo-form-container');\n        this._todoContainer = this.container.querySelector('.todos__list');\n    }\n    set todoContainer(items) {\n        this._todoContainer.replaceChildren(...items);\n    }\n    set formContainer(formElement) {\n        if (formElement) {\n            this._formContainer.replaceChildren(formElement);\n        }\n        else {\n            this._formContainer.innerHTML = \"\";\n        }\n    }\n}\n","import { EventEmitter } from './EventEmmiter';\nexport class ToDoModel extends EventEmitter {\n    constructor() {\n        super();\n        this._items = [];\n    }\n    set items(data) {\n        this._items = data;\n        this.emit('changed');\n    }\n    get items() {\n        return this._items;\n    }\n    addItem(data) {\n        const uniqueId = Math.max(...this._items.map(item => Number(item.id))) + 1;\n        const newItem = { id: String(uniqueId), name: data };\n        this._items.push(newItem);\n        this.emit('changed');\n        return newItem;\n    }\n    removeItem(id) {\n        this._items = this._items.filter(item => item.id !== id);\n        this.emit('changed');\n    }\n    getItem(id) {\n        return this._items.find(item => item.id === id);\n    }\n    editItem(id, name) {\n        const editedItem = this._items.find(item => item.id === id);\n        editedItem.name = name;\n        this.emit('changed');\n    }\n    ;\n}\n","export const todos = [\n    { id: \"1\", name: \"Сделать проектную работу\" },\n    { id: \"2\", name: \"Полить цветы\" },\n    { id: \"3\", name: \"Пройти туториал по Реакту\" },\n    { id: \"4\", name: \"Сделать фронт для своего проекта\" },\n    { id: \"5\", name: \"Погулять с собакой\" },\n    { id: \"6\", name: \"Разобраться в замыканиях\" },\n    { id: \"7\", name: \"Решить задачу на Codewars\" },\n];\n","export class Popup {\n    constructor(container) {\n        this.container = container;\n        this.closeButton = container.querySelector('.popup__close');\n        this._content = container.querySelector('.popup__content');\n        this.closeButton.addEventListener('click', this.close.bind(this));\n        this.container.addEventListener('click', this.close.bind(this));\n        this._content.addEventListener('click', evt => {\n            evt.stopPropagation();\n        });\n    }\n    set content(value) {\n        this._content.replaceChildren(value);\n    }\n    open() {\n        this.container.classList.add('popup_is-opened');\n    }\n    close() {\n        this.container.classList.remove('popup_is-opened');\n        this.content = null;\n    }\n}\n","/**\n * Презентер отвечает за взаимодействие между классами рендера и работы с данными. Паттерн Facade\n */\nexport class ItemPresenter {\n    constructor(model, formConstuctor, viewPageContainer, viewItemConstructor, modal) {\n        this.model = model;\n        this.formConstuctor = formConstuctor;\n        this.viewPageContainer = viewPageContainer;\n        this.viewItemConstructor = viewItemConstructor;\n        this.modal = modal;\n        this.itemTemplate = document.querySelector('#todo-item-template');\n        this.formTemplate = document.querySelector('#todo-form-template');\n    }\n    init() {\n        this.todoForm = new this.formConstuctor(this.formTemplate);\n        this.todoForm.setHandler(this.handleFormSubmit.bind(this));\n        this.todoForm.buttonText = 'Добавить';\n        this.todoForm.placeholder = 'Следующее дело';\n        this.viewPageContainer.formContainer = this.todoForm.render();\n        this.todoEditForm = new this.formConstuctor(this.formTemplate);\n        this.todoEditForm.buttonText = 'Изменить';\n        this.todoEditForm.placeholder = 'Новое название';\n        this.model.on('changed', () => {\n            this.renderView();\n        });\n    }\n    handleFormSubmit(data) {\n        this.model.addItem(data);\n        this.todoForm.clearValue();\n    }\n    handleSubmitEditForm(data, id) {\n        this.model.editItem(id, data);\n        this.todoEditForm.clearValue();\n        this.modal.close();\n    }\n    handleCopyItem(item) {\n        const copyedItem = this.model.getItem(item.id);\n        this.model.addItem(copyedItem.name);\n    }\n    handleDeleteItem(item) {\n        this.model.removeItem(item.id);\n    }\n    handleEditItem(item) {\n        const editedItem = this.model.getItem(item.id);\n        this.todoEditForm.setValue(editedItem.name);\n        this.modal.content = this.todoEditForm.render();\n        this.todoEditForm.setHandler((data) => this.handleSubmitEditForm(data, item.id));\n        this.modal.open();\n    }\n    renderView() {\n        const itemList = this.model.items.map(item => {\n            const todoItem = new this.viewItemConstructor(this.itemTemplate);\n            todoItem.on('copy', this.handleCopyItem.bind(this));\n            todoItem.on('edit', this.handleEditItem.bind(this));\n            todoItem.on('delete', this.handleDeleteItem.bind(this));\n            const itemElement = todoItem.render(item);\n            return itemElement;\n        }).reverse();\n        this.viewPageContainer.todoContainer = itemList;\n    }\n}\n","export class Form {\n    constructor(formTemplate) {\n        this.formElement = formTemplate.content\n            .querySelector(\".todos__form\")\n            .cloneNode(true);\n        this.inputField = this.formElement.querySelector(\".todo-form__input\");\n        this.submitButton = this.formElement.querySelector(\".todo-form__submit-btn\");\n        this.formElement.addEventListener('submit', evt => {\n            evt.preventDefault();\n            this.handleFormSubmit(this.inputField.value);\n        });\n    }\n    setHandler(handleFormSubmit) {\n        this.handleFormSubmit = handleFormSubmit;\n    }\n    render() {\n        return this.formElement;\n    }\n    setValue(data) {\n        this.inputField.value = data;\n    }\n    getValue() {\n        return this.inputField.value;\n    }\n    clearValue() {\n        this.formElement.reset();\n    }\n    set buttonText(data) {\n        this.submitButton.textContent = data;\n    }\n    set placeholder(data) {\n        this.inputField.placeholder = data;\n    }\n}\n","import { EventEmitter } from \"./EventEmmiter\";\nexport class Item extends EventEmitter {\n    constructor(template) {\n        super();\n        this.itemElement = template.content\n            .querySelector(\".todo-item\")\n            .cloneNode(true);\n        this.title = this.itemElement.querySelector(\".todo-item__text\");\n        this.copyButton = this.itemElement.querySelector(\".todo-item__copy\");\n        this.deleteButton = this.itemElement.querySelector(\".todo-item__del\");\n        this.editButton = this.itemElement.querySelector(\".todo-item__edit\");\n        this.deleteButton.addEventListener(\"click\", () => this.emit(\"delete\"));\n        this.copyButton.addEventListener(\"click\", () => this.emit(\"copy\"));\n        this.editButton.addEventListener(\"click\", () => this.emit(\"edit\"));\n    }\n    get id() {\n        return this._id || \"\";\n    }\n    set id(value) {\n        this._id = value;\n    }\n    get name() {\n        return this.title.textContent || \"\";\n    }\n    set name(value) {\n        this.title.textContent = value;\n    }\n    render(item) {\n        this.name = item.name;\n        this.id = item.id;\n        return this.itemElement;\n    }\n}\n"],"names":["EventEmitter","constructor","this","_events","Map","on","eventName","callback","_a","has","set","Set","get","add","off","delete","size","emit","data","forEach","subscribers","name","RegExp","test","onAll","offAll","trigger","context","event","Object","assign","contentElement","document","querySelector","popup","itemContainer","Page","container","_formContainer","_todoContainer","todoContainer","items","replaceChildren","formContainer","formElement","innerHTML","todoModel","ToDoModel","super","_items","addItem","uniqueId","Math","max","map","item","Number","id","newItem","String","push","removeItem","filter","getItem","find","editItem","modal","Popup","closeButton","_content","addEventListener","close","bind","evt","stopPropagation","content","value","open","classList","remove","itemPresenter","ItemPresenter","model","formConstuctor","viewPageContainer","viewItemConstructor","itemTemplate","formTemplate","init","todoForm","setHandler","handleFormSubmit","buttonText","placeholder","render","todoEditForm","renderView","clearValue","handleSubmitEditForm","handleCopyItem","copyedItem","handleDeleteItem","handleEditItem","editedItem","setValue","itemList","todoItem","reverse","Form","cloneNode","inputField","submitButton","preventDefault","getValue","reset","textContent","Item","template","itemElement","title","copyButton","deleteButton","editButton","_id"],"sourceRoot":""}